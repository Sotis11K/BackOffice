
@page "/users"
@using BackOffice.Data
@using System.ComponentModel.DataAnnotations


@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager


<PageTitle>Users</PageTitle>

<h1>Users</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var count = 1;

    @foreach (var user in users)
    {
        <EditForm Model="@user" OnValidSubmit="@(() => UpdateUserInfo(user, Input))" FormName="@($"form{count}")">
            <DataAnnotationsValidator />

            <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="givenname" aria-required="true" placeholder="@user.FirstName" />
            <ValidationMessage For="@(() => Input.FirstName)" />

            <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="surname" aria-required="true" placeholder="@user.LastName" />
            <ValidationMessage For="@(() => Input.LastName)" />

            <InputText @bind-Value="Input.Email" type="email" class="form-control" autocomplete="email" aria-required="true" placeholder="@user.Email" />
            <ValidationMessage For="() => Input.Email" />

            <button type="submit">Update</button>
        </EditForm>
            <button @onclick="(() => DeleteUser(user))">Delete</button>
        count++;
    }
}

@code {
    private ApplicationUser[] users;
    private string ErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new InputModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        users = await Http.GetFromJsonAsync<ApplicationUser[]>("http://localhost:7024/api/GetUsers");
    }

    private async Task UpdateUserInfo(ApplicationUser user, InputModel input)
    {

        if (input.FirstName == "" || input.LastName == "" || input.Email == "")
        {
            return;
        }
        else if (input.FirstName != "" && input.LastName != "" && input.Email != "")
        {
            var updatedUser = new ApplicationUser
                {
                    Id = user.Id, // Ensure you have a way to identify the user, like Id
                    FirstName = input.FirstName,
                    LastName = input.LastName,
                    Email = input.Email,
                };

            if (await UserManager.Users.AnyAsync(x => x.Email == updatedUser.Email && x.Id != updatedUser.Id)) // Ensure the email is unique
            {
                ErrorMessage = "Email already in use.";
                return;
            }

            var response = await Http.PutAsJsonAsync($"http://localhost:7024/api/UpdateUser/{updatedUser.Id}", updatedUser);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"User with ID {updatedUser.Id} updated successfully");
                // Optionally, update local user data if necessary
                var index = Array.FindIndex(users, u => u.Id == updatedUser.Id);
                if (index != -1)
                {
                    users[index] = updatedUser;
                }
                input.FirstName = "";
                input.LastName = "";
                input.Email = "";


            }
            else
            {
                ErrorMessage = $"Failed to update user. Status code: {response.StatusCode}";
                Console.WriteLine(ErrorMessage);
            }
        }

    }

    private async Task DeleteUser(ApplicationUser user)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:7024/api/DeleteUser/{user.Id}");

            if (response.IsSuccessStatusCode)
            {
                users = users.Where(u => u.Id != user.Id).ToArray();
                Console.WriteLine("User deleted successfully");
            }
            else
            {
                ErrorMessage = $"Failed to delete user. Status code: {response.StatusCode}";
                Console.WriteLine(ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exception deleting user: {ex.Message}";
            Console.WriteLine(ErrorMessage);
        }
    }

    public class InputModel
    {
        [Required]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
    }

}